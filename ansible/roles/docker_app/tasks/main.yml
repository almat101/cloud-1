# roles/docker_app/tasks/main.yml
---
- name: Ensure Docker Compose is available (sanity check)
  ansible.builtin.command: "{{ docker_compose_command }} version"
  register: docker_compose_version_check
  changed_when: false
  failed_when: docker_compose_version_check.rc != 0

- name: Check if code was updated
  ansible.builtin.set_fact:
    should_rebuild: "{{ code_was_updated | default(false) }}"

- name: Display deployment strategy
  ansible.builtin.debug:
    msg: "Deployment strategy: {{ should_rebuild | ternary('REBUILD (code changed)', 'NORMAL START (no code changes)') }}"

# Conditional logic: Full rebuild when code changed
- name: Stop and remove existing Docker Compose services (when rebuilding)
  community.docker.docker_compose_v2:
    project_src: "{{ app_dest_path_compose }}"
    state: absent # Arresta e rimuove i container e le reti
  ignore_errors: yes # Ignora errori se i servizi non sono ancora attivi
  become: yes
  become_user: "{{ app_owner_user }}"
  when: should_rebuild

- name: Build Docker Compose services (when rebuilding)
  community.docker.docker_compose_v2:
    project_src: "{{ app_dest_path_compose }}"
    build: always # Forziamo la ricostruzione ogni volta per coerenza
  become: yes
  become_user: "{{ app_owner_user }}"
  when: should_rebuild

- name: Start Docker Compose services after rebuild
  community.docker.docker_compose_v2:
    project_src: "{{ app_dest_path_compose }}"
    state: present # Assicura che i servizi siano su
  become: yes
  become_user: "{{ app_owner_user }}"
  register: docker_compose_rebuild_result
  when: should_rebuild

# Normal startup when no code changes
- name: Start Docker Compose services normally (no rebuild)
  community.docker.docker_compose_v2:
    project_src: "{{ app_dest_path_compose }}"
    state: present # Assicura che i servizi siano su
  become: yes
  become_user: "{{ app_owner_user }}"
  register: docker_compose_normal_result
  when: not should_rebuild

# Display results based on deployment type
- name: Display Docker Compose rebuild status
  ansible.builtin.debug:
    msg: "Docker Compose services REBUILT and started. Status: {{ docker_compose_rebuild_result }}"
  when: should_rebuild

- name: Display Docker Compose normal startup status
  ansible.builtin.debug:
    msg: "Docker Compose services started normally. Status: {{ docker_compose_normal_result }}"
  when: not should_rebuild

- name: Wait for HTTP/HTTPS service to respond properly
  ansible.builtin.uri:
    url: "https://{{ ansible_default_ipv4.address | default('localhost') }}/health"
    method: GET
    validate_certs: false  # For self-signed certs
    status_code: 200       # Expect 200 OK
    timeout: 10
  retries: 12
  delay: 10
  register: health_response
  until: health_response.status == 200
  become: yes

# Add this task anywhere in your docker_app role for testing
- name: Debug ansible_default_ipv4.address value
  ansible.builtin.debug:
    msg: |
      ansible_default_ipv4.address: {{ ansible_default_ipv4.address | default('UNDEFINED') }}
      ansible_host: {{ ansible_host | default('UNDEFINED') }}
      inventory_hostname: {{ inventory_hostname }}
      Current host being used: {{ ansible_default_ipv4.address | default('localhost') }}

- name: Final deployment status
  ansible.builtin.debug:
    msg: "âœ… Deployment completed successfully - {{ should_rebuild | ternary('with rebuild', 'without rebuild') }}"

# # roles/docker_app/tasks/main.yml
# ---
# - name: Ensure Docker Compose is available (sanity check)
#   ansible.builtin.command: "{{ docker_compose_command }} version"
#   register: docker_compose_version_check
#   changed_when: false
#   failed_when: docker_compose_version_check.rc != 0

# - name: Stop and remove existing Docker Compose services if running
#   community.docker.docker_compose_v2:
#     project_src: "{{ app_dest_path_compose }}"
#     state: absent # Arresta e rimuove i container e le reti
#   ignore_errors: yes # Ignora errori se i servizi non sono ancora attivi
#   become: yes
#   become_user: "{{ app_owner_user }}"
#   #notify: Restart Docker Compose Services # Notifica l'handler dopo aver fermato i servizi

# - name: Build Docker Compose services
#   community.docker.docker_compose_v2:
#     project_src: "{{ app_dest_path_compose }}"
#     build: always # Forziamo la ricostruzione ogni volta per coerenza
#   become: yes
#   become_user: "{{ app_owner_user }}"
#   #notify: Restart Docker Compose Services # Notifica l'handler dopo aver ricostruito

# - name: Start Docker Compose services
#   community.docker.docker_compose_v2:
#     project_src: "{{ app_dest_path_compose }}"
#     state: present # Assicura che i servizi siano su
#   become: yes
#   become_user: "{{ app_owner_user }}"
#   register: docker_compose_start_result

# - name: Display Docker Compose status
#   ansible.builtin.debug:
#     msg: "Docker Compose services started. Status: {{ docker_compose_start_result }}"